#version 460
#extension GL_EXT_ray_tracing : require

#define PI (3.14159265359)

layout(location = 0) rayPayloadEXT Payload{
	uint recursionDepth;
	uint randomSeed;
	vec3 rayOrigin;
	vec3 rayDirection;
	vec3 radiance;
} prd;

layout(set = 0, binding = 0) uniform accelerationStructureEXT accelerationStructure;
layout(set = 0, binding = 1, rgba32f) uniform image2D image;
layout(set = 0, binding = 2, rgba32f) uniform image2D storageImage;

layout(set=1, binding = 0) uniform UBO{
	mat4 inverseView;
	mat4 inversePerspective;
	uint lightCount;
	uint frameIndex;
} ubo;

// Generate a random unsigned int in [0, 2^24) given the previous RNG state
// using the Numerical Recipes linear congruential generator
uint pcgHash(inout uint prev)
{
  uint state = prev * 747796405u + 2891336453u;
  uint word = ((state >> ((state >> 28u)+4u)) ^ state) * 277803737u;
  prev       = (word >> 22u) ^ word;
  return prev & 0x00FFFFFF;
}

// Generate a random float in [0, 1) given the previous RNG state
float rnd(inout uint prev)
{
  return (float(pcgHash(prev)) / float(0x01000000));
}

void main(){
	prd.randomSeed = ((gl_LaunchIDEXT.x*gl_LaunchSizeEXT.y)+gl_LaunchIDEXT.y)*(ubo.frameIndex+1);

	const vec2 pixelCenter  = gl_LaunchIDEXT.xy + vec2(rnd(prd.randomSeed), rnd(prd.randomSeed));
	const vec2 pixelPos     = pixelCenter / vec2(gl_LaunchSizeEXT.xy)*2-1;

	uint  rayFlags          = gl_RayFlagsOpaqueEXT;
	float tMin              = 0.001;
	float tMax              = 10000.0;

	uint samples = 4;
	vec3 color = vec3(0, 0, 0);
	for(uint i = 0; i<samples; i++){
		prd.rayOrigin           = vec3(ubo.inverseView * vec4(0, 0, 0, 1));
		vec4 localDir           = ubo.inversePerspective * vec4(pixelPos.x, -pixelPos.y, 1, 1);
		prd.rayDirection        = vec3(ubo.inverseView * vec4(normalize(localDir.xyz), 0));
		prd.recursionDepth = 0;

		traceRayEXT(accelerationStructure,    // acceleration structure
					rayFlags,                 // rayFlags
					0xFF,                     // cullMask
					0,                        // sbtRecordOffset
					0,                        // sbtRecordStride
					0,                        // missIndex
					prd.rayOrigin,            // ray origin
					tMin,                     // ray min range
					prd.rayDirection,         // ray direction
					tMax,                     // ray max range
					0                         // payload (location = 0)
		);

		color += max(prd.radiance, vec3(0));
	}
	color /= samples;

	vec4 previousColor = imageLoad(storageImage, ivec2(gl_LaunchIDEXT.xy));
	color = max(color, vec3(0));
	color = previousColor.rgb*ubo.frameIndex/(ubo.frameIndex+1) + color/(ubo.frameIndex+1);
	imageStore(storageImage, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1));

	color = color / (color + vec3(1.0));
	color = pow(color, vec3(1.0/2.2));

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1));
}
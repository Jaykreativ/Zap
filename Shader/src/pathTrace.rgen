#version 460
#extension GL_EXT_ray_tracing : require

#define PI (3.14159265359)

layout(location = 0) rayPayloadEXT Payload{
	uint recursionDepth;
	uint randomSeed;
	vec3 rayOrigin;
	vec3 rayDirection;
	vec3 radiance;
} prd;

layout(set = 0, binding = 0) uniform accelerationStructureEXT accelerationStructure;
layout(set = 0, binding = 1, rgba32f) uniform image2D image;
layout(set = 0, binding = 2, rgba32f) uniform image2D storageImage;

layout(set=1, binding = 0) uniform UBO{
	mat4 inverseView;
	mat4 inversePerspective;
	uint lightCount;
	uint frameIndex;
} ubo;

void main(){
	const vec2 pixelCenter  = gl_LaunchIDEXT.xy + vec2(0.5);
	const vec2 pixelPos     = pixelCenter / vec2(gl_LaunchSizeEXT.xy)*2-1;

	uint  rayFlags          = gl_RayFlagsOpaqueEXT;
	float tMin              = 0.001;
	float tMax              = 10000.0;

	prd.rayOrigin           = vec3(ubo.inverseView * vec4(0, 0, 0, 1));
	vec4 localDir           = ubo.inversePerspective * vec4(pixelPos.x, -pixelPos.y, 1, 1);
	prd.rayDirection        = vec3(ubo.inverseView * vec4(normalize(localDir.xyz), 0));
	prd.randomSeed = ((gl_LaunchIDEXT.x*gl_LaunchSizeEXT.y)+gl_LaunchIDEXT.y)*(ubo.frameIndex+1);
	prd.recursionDepth = 0;
	traceRayEXT(accelerationStructure,    // acceleration structure
				rayFlags,                 // rayFlags
				0xFF,                     // cullMask
				0,                        // sbtRecordOffset
				0,                        // sbtRecordStride
				0,                        // missIndex
				prd.rayOrigin,               // ray origin
				tMin,                     // ray min range
				prd.rayDirection,            // ray direction
				tMax,                     // ray max range
				0                         // payload (location = 0)
	);

	vec3 color = prd.radiance;

	vec4 previousColor = imageLoad(storageImage, ivec2(gl_LaunchIDEXT.xy));
	color = max(color, vec3(0));
	color = mix(previousColor.xyz, color, 1.0/(ubo.frameIndex+1));
	imageStore(storageImage, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1));

	color = color / (color + vec3(1.0));
	color = pow(color, vec3(1.0/2.2));

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1));
}